name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            executable: Docx2Shelf.exe
            artifact: docx2shelf-windows
          - os: macos-latest
            platform: macos
            executable: Docx2Shelf.app
            artifact: docx2shelf-macos
          - os: ubuntu-latest
            platform: linux
            executable: Docx2Shelf
            artifact: docx2shelf-linux

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-tk \
          libtk8.6 \
          libtkinter \
          python3-pil.imagetk

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install python-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[all]
        pip install pyinstaller>=6.0

    - name: Create assets directory
      run: |
        mkdir -p assets/icons

    - name: Create placeholder icons
      shell: bash
      run: |
        # Create simple placeholder icons for build
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo "Windows icon placeholder" > assets/icons/docx2shelf.ico
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "macOS icon placeholder" > assets/icons/docx2shelf.icns
        else
          echo "Linux icon placeholder" > assets/icons/docx2shelf.png
        fi

    - name: Generate build spec
      run: python build_config.py

    - name: Build with PyInstaller
      run: |
        pyinstaller docx2shelf.spec --clean --noconfirm

    - name: Create portable archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        7z a docx2shelf-windows-portable.zip ./dist/Docx2Shelf/*

    - name: Create portable archive (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        zip -r docx2shelf-macos-portable.zip Docx2Shelf.app

    - name: Create portable archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist
        tar -czf docx2shelf-linux-portable.tar.gz Docx2Shelf/

    - name: Test executable
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ./dist/Docx2Shelf/Docx2Shelf.exe --version || echo "GUI mode test"
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          ./dist/Docx2Shelf.app/Contents/MacOS/Docx2Shelf --version || echo "GUI mode test"
        else
          ./dist/Docx2Shelf/Docx2Shelf --version || echo "GUI mode test"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact }}
        path: |
          dist/
          *.zip
          *.tar.gz

  create-installers:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            installer-type: nsis
          - os: macos-latest
            installer-type: dmg
          - os: ubuntu-latest
            installer-type: appimage

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: docx2shelf-${{ matrix.installer-type == 'nsis' && 'windows' || matrix.installer-type == 'dmg' && 'macos' || 'linux' }}

    - name: Create Windows installer (NSIS)
      if: matrix.installer-type == 'nsis'
      run: |
        # Install NSIS
        choco install nsis -y

        # Create NSIS script
        $nsis_script = @"
        !define APP_NAME "Docx2Shelf"
        !define APP_VERSION "1.6.2"

        Name `${APP_NAME}`
        OutFile "Docx2Shelf-Setup.exe"
        InstallDir `$PROGRAMFILES\Docx2Shelf`

        Page directory
        Page instfiles

        Section "Install"
            SetOutPath `$INSTDIR`
            File /r "dist\Docx2Shelf\*"

            CreateShortcut "`$DESKTOP\Docx2Shelf.lnk" "`$INSTDIR\Docx2Shelf.exe"
            CreateShortcut "`$SMPROGRAMS\Docx2Shelf.lnk" "`$INSTDIR\Docx2Shelf.exe"

            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf" "DisplayName" "Docx2Shelf"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf" "UninstallString" "`$INSTDIR\uninstall.exe"

            WriteUninstaller "`$INSTDIR\uninstall.exe"
        SectionEnd

        Section "Uninstall"
            Delete "`$DESKTOP\Docx2Shelf.lnk"
            Delete "`$SMPROGRAMS\Docx2Shelf.lnk"
            RMDir /r "`$INSTDIR"
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf"
        SectionEnd
        "@

        $nsis_script | Out-File -FilePath "installer.nsi" -Encoding ASCII
        makensis installer.nsi

    - name: Create macOS DMG
      if: matrix.installer-type == 'dmg'
      run: |
        brew install create-dmg

        mkdir -p dmg-staging
        cp -R dist/Docx2Shelf.app dmg-staging/

        create-dmg \
          --volname "Docx2Shelf Installer" \
          --volicon "assets/icons/docx2shelf.icns" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "Docx2Shelf.app" 175 120 \
          --hide-extension "Docx2Shelf.app" \
          --app-drop-link 425 120 \
          "Docx2Shelf-Installer.dmg" \
          "dmg-staging/"

    - name: Create Linux AppImage
      if: matrix.installer-type == 'appimage'
      run: |
        # Download AppImage tools
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage

        # Create AppDir structure
        mkdir -p Docx2Shelf.AppDir/usr/bin
        mkdir -p Docx2Shelf.AppDir/usr/share/applications
        mkdir -p Docx2Shelf.AppDir/usr/share/icons/hicolor/256x256/apps

        # Copy application files
        cp -r dist/Docx2Shelf/* Docx2Shelf.AppDir/usr/bin/

        # Create desktop file
        cat > Docx2Shelf.AppDir/usr/share/applications/docx2shelf.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Docx2Shelf
        Comment=Document to EPUB Converter
        Exec=Docx2Shelf
        Icon=docx2shelf
        Categories=Office;Publishing;
        EOF

        # Copy icon
        cp assets/icons/docx2shelf.png Docx2Shelf.AppDir/usr/share/icons/hicolor/256x256/apps/docx2shelf.png

        # Create AppRun
        cat > Docx2Shelf.AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        exec "${HERE}/usr/bin/Docx2Shelf" "$@"
        EOF
        chmod +x Docx2Shelf.AppDir/AppRun

        # Build AppImage
        ./appimagetool-x86_64.AppImage Docx2Shelf.AppDir Docx2Shelf-x86_64.AppImage

    - name: Upload installer artifacts
      uses: actions/upload-artifact@v3
      with:
        name: installers-${{ matrix.installer-type }}
        path: |
          *.exe
          *.dmg
          *.AppImage

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, create-installers]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Organize release files
      run: |
        # Create release directory structure
        mkdir -p release-assets

        # Copy installers
        find . -name "Docx2Shelf-Setup.exe" -exec cp {} release-assets/ \;
        find . -name "Docx2Shelf-Installer.dmg" -exec cp {} release-assets/ \;
        find . -name "Docx2Shelf-x86_64.AppImage" -exec cp {} release-assets/ \;

        # Copy portable versions
        find . -name "docx2shelf-*-portable.*" -exec cp {} release-assets/ \;

        # Rename files for clarity
        cd release-assets

        # Rename with version tag
        VERSION=${GITHUB_REF#refs/tags/v}

        if [ -f "Docx2Shelf-Setup.exe" ]; then
          mv "Docx2Shelf-Setup.exe" "Docx2Shelf-${VERSION}-Windows-Installer.exe"
        fi

        if [ -f "Docx2Shelf-Installer.dmg" ]; then
          mv "Docx2Shelf-Installer.dmg" "Docx2Shelf-${VERSION}-macOS-Installer.dmg"
        fi

        if [ -f "Docx2Shelf-x86_64.AppImage" ]; then
          mv "Docx2Shelf-x86_64.AppImage" "Docx2Shelf-${VERSION}-Linux-x86_64.AppImage"
        fi

        # Rename portable files
        for file in docx2shelf-*-portable.*; do
          if [ -f "$file" ]; then
            new_name=$(echo "$file" | sed "s/docx2shelf-/Docx2Shelf-${VERSION}-/")
            mv "$file" "$new_name"
          fi
        done

        # List all files
        ls -la

    - name: Generate checksums
      run: |
        cd release-assets

        # Generate SHA256 checksums
        sha256sum * > SHA256SUMS.txt

        # Generate MD5 checksums for compatibility
        md5sum * > MD5SUMS.txt

        echo "Generated checksums:"
        cat SHA256SUMS.txt

    - name: Create release notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}

        cat > RELEASE_NOTES.md << EOF
        # Docx2Shelf v${VERSION}

        ## 📥 Downloads

        ### Installers (Recommended)
        - **Windows**: [Docx2Shelf-${VERSION}-Windows-Installer.exe](./Docx2Shelf-${VERSION}-Windows-Installer.exe)
        - **macOS**: [Docx2Shelf-${VERSION}-macOS-Installer.dmg](./Docx2Shelf-${VERSION}-macOS-Installer.dmg)
        - **Linux**: [Docx2Shelf-${VERSION}-Linux-x86_64.AppImage](./Docx2Shelf-${VERSION}-Linux-x86_64.AppImage)

        ### Portable Versions
        - **Windows Portable**: [Docx2Shelf-${VERSION}-windows-portable.zip](./Docx2Shelf-${VERSION}-windows-portable.zip)
        - **macOS Portable**: [Docx2Shelf-${VERSION}-macos-portable.zip](./Docx2Shelf-${VERSION}-macos-portable.zip)
        - **Linux Portable**: [Docx2Shelf-${VERSION}-linux-portable.tar.gz](./Docx2Shelf-${VERSION}-linux-portable.tar.gz)

        ### Verification
        - [SHA256 Checksums](./SHA256SUMS.txt)
        - [MD5 Checksums](./MD5SUMS.txt)

        ## 🚀 Quick Start

        ### Windows
        1. Download \`Docx2Shelf-${VERSION}-Windows-Installer.exe\`
        2. Run the installer
        3. Launch from Start Menu or Desktop shortcut

        ### macOS
        1. Download \`Docx2Shelf-${VERSION}-macOS-Installer.dmg\`
        2. Open the DMG and drag Docx2Shelf to Applications
        3. Launch from Applications folder

        ### Linux
        1. Download \`Docx2Shelf-${VERSION}-Linux-x86_64.AppImage\`
        2. Make executable: \`chmod +x Docx2Shelf-*.AppImage\`
        3. Run: \`./Docx2Shelf-*.AppImage\`

        ## 🛠️ System Requirements

        - **Windows**: Windows 10/11 (64-bit)
        - **macOS**: macOS 10.15+ (Catalina or newer)
        - **Linux**: Modern distribution with glibc 2.28+ (Ubuntu 18.04+, CentOS 8+)

        ## 🤖 AI Features

        This release includes advanced AI chapter detection with support for:
        - **Local LLMs** (Ollama, LM Studio, etc.)
        - **Remote AI services** (OpenAI, Anthropic)
        - **Free AI quota** for testing
        - **Heuristic fallback** for offline use

        ## 🔐 Security Verification

        Verify download integrity using checksums:
        \`\`\`bash
        # Windows
        certutil -hashfile Docx2Shelf-${VERSION}-Windows-Installer.exe SHA256

        # macOS/Linux
        sha256sum Docx2Shelf-${VERSION}-*
        \`\`\`

        Compare against [SHA256SUMS.txt](./SHA256SUMS.txt)

        EOF

    - name: Upload install.bat
      run: |
        # Copy the latest install.bat to release assets
        if [ -f "install.bat" ]; then
          cp install.bat release-assets/
        fi

        # Also copy install.sh for Linux/macOS users
        if [ -f "scripts/install.sh" ]; then
          cp scripts/install.sh release-assets/
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/*
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
        discussion_category_name: Releases
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to package registries
      run: |
        # Future: Upload to package managers
        echo "Future: Upload to chocolatey, homebrew, snap store, etc."