name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: windows
            executable: Docx2Shelf.exe
            artifact: docx2shelf-windows
          - os: macos-latest
            platform: macos
            executable: Docx2Shelf.app
            artifact: docx2shelf-macos
          - os: ubuntu-latest
            platform: linux
            executable: Docx2Shelf
            artifact: docx2shelf-linux

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-tk \
          python3-pil.imagetk

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install python-tk
        # Install additional dependencies for PyInstaller
        pip install macholib Pillow

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pyinstaller>=6.0

    - name: Create assets directory
      shell: bash
      run: |
        mkdir -p src/docx2shelf/gui/assets

    - name: Create placeholder icons
      shell: bash
      run: |
        # Create simple placeholder icons for build
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo "Windows icon placeholder" > src/docx2shelf/gui/assets/icon.ico
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "macOS icon placeholder" > src/docx2shelf/gui/assets/icon.icns
        else
          echo "Linux icon placeholder" > src/docx2shelf/gui/assets/icon.png
        fi

    - name: Build GUI executable with PyInstaller
      run: |
        pyinstaller docx2shelf_gui.spec --clean --noconfirm --log-level=DEBUG

    - name: Create portable archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        7z a docx2shelf-windows-portable.zip ./dist/Docx2Shelf/*

    - name: Create portable archive (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        zip -r docx2shelf-macos-portable.zip Docx2Shelf.app

    - name: Create portable archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist
        tar -czf docx2shelf-linux-portable.tar.gz Docx2Shelf/

    - name: Test GUI executable
      shell: bash
      run: |
        # Test that the GUI executable exists and is a valid binary
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ls -la ./dist/Docx2Shelf/Docx2Shelf.exe
          file ./dist/Docx2Shelf/Docx2Shelf.exe || echo "Windows executable ready"
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          ls -la ./dist/Docx2Shelf.app/Contents/MacOS/Docx2Shelf
          file ./dist/Docx2Shelf.app/Contents/MacOS/Docx2Shelf || echo "macOS app bundle ready"
        else
          ls -la ./dist/Docx2Shelf/Docx2Shelf
          file ./dist/Docx2Shelf/Docx2Shelf || echo "Linux executable ready"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          dist/
          *.zip
          *.tar.gz

  create-installers:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            installer-type: nsis
            artifact-name: docx2shelf-windows
          - os: macos-latest
            installer-type: dmg
            artifact-name: docx2shelf-macos
          - os: ubuntu-latest
            installer-type: appimage
            artifact-name: docx2shelf-linux

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}

    - name: Create Windows installer (NSIS)
      if: matrix.installer-type == 'nsis'
      run: |
        echo "Starting Windows installer creation..."

        # Install NSIS
        choco install nsis -y

        # Create NSIS script
        $nsis_script = @"
        !define APP_NAME "Docx2Shelf"
        !define APP_VERSION "1.7.7"
        !define APP_DESCRIPTION "Document to EPUB Converter"

        Name `${APP_NAME}`
        OutFile "Docx2Shelf-Setup.exe"
        InstallDir `$PROGRAMFILES\Docx2Shelf`
        RequestExecutionLevel admin

        # Modern UI
        !include "MUI2.nsh"
        # Icons disabled for compatibility
        #!define MUI_ICON "src\docx2shelf\gui\assets\icon.ico"
        #!define MUI_UNICON "src\docx2shelf\gui\assets\icon.ico"

        # Pages
        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_LICENSE "LICENSE"
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_PAGE_FINISH

        # Uninstaller pages
        !insertmacro MUI_UNPAGE_WELCOME
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        !insertmacro MUI_UNPAGE_FINISH

        # Languages
        !insertmacro MUI_LANGUAGE "English"

        Section "Install"
            SetOutPath `$INSTDIR`
            File /r "dist\Docx2Shelf\*"

            # Create shortcuts
            CreateShortcut "`$DESKTOP\Docx2Shelf.lnk" "`$INSTDIR\Docx2Shelf.exe"
            CreateShortcut "`$SMPROGRAMS\Docx2Shelf.lnk" "`$INSTDIR\Docx2Shelf.exe"

            # Register application
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf" "DisplayName" "Docx2Shelf - Document to EPUB Converter"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf" "DisplayVersion" "`${APP_VERSION}`"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf" "Publisher" "Docx2Shelf Contributors"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf" "UninstallString" "`$INSTDIR\uninstall.exe"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf" "InstallLocation" "`$INSTDIR"
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf" "NoModify" 1
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf" "NoRepair" 1

            # File associations for supported formats
            WriteRegStr HKCR ".docx\OpenWithProgids" "Docx2Shelf.Document" ""
            WriteRegStr HKCR ".md\OpenWithProgids" "Docx2Shelf.Document" ""
            WriteRegStr HKCR ".html\OpenWithProgids" "Docx2Shelf.Document" ""
            WriteRegStr HKCR ".htm\OpenWithProgids" "Docx2Shelf.Document" ""
            WriteRegStr HKCR ".txt\OpenWithProgids" "Docx2Shelf.Document" ""
            WriteRegStr HKCR "Docx2Shelf.Document" "" "Docx2Shelf Document"
            WriteRegStr HKCR "Docx2Shelf.Document\shell\open\command" "" "`$INSTDIR\Docx2Shelf.exe `"%1`""
            WriteRegStr HKCR "Docx2Shelf.Document\DefaultIcon" "" "`$INSTDIR\Docx2Shelf.exe,0"

            WriteUninstaller "`$INSTDIR\uninstall.exe"
        SectionEnd

        Section "Uninstall"
            # Remove shortcuts
            Delete "`$DESKTOP\Docx2Shelf.lnk"
            Delete "`$SMPROGRAMS\Docx2Shelf.lnk"

            # Remove file associations
            DeleteRegKey HKCR ".docx\OpenWithProgids\Docx2Shelf.Document"
            DeleteRegKey HKCR ".md\OpenWithProgids\Docx2Shelf.Document"
            DeleteRegKey HKCR ".html\OpenWithProgids\Docx2Shelf.Document"
            DeleteRegKey HKCR ".txt\OpenWithProgids\Docx2Shelf.Document"
            DeleteRegKey HKCR "Docx2Shelf.Document"

            # Remove registry entries
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Docx2Shelf"

            # Remove application files (with confirmation)
            MessageBox MB_YESNO "Remove all application files and settings?" IDNO SkipFiles
                RMDir /r "`$INSTDIR"
                # Remove user settings (optional)
                MessageBox MB_YESNO "Also remove user settings and preferences?" IDNO SkipSettings
                    RMDir /r "`$APPDATA\Docx2Shelf"
                    RMDir /r "`$LOCALAPPDATA\Docx2Shelf"
                SkipSettings:
            SkipFiles:

            # Final cleanup message
            MessageBox MB_OK "Docx2Shelf has been successfully uninstalled."
        SectionEnd
        "@

        $nsis_script | Out-File -FilePath "installer.nsi" -Encoding ASCII

        # Add chocolatey tools to PATH and run makensis
        $env:PATH += ";C:\ProgramData\chocolatey\lib\nsis\tools;C:\Program Files (x86)\NSIS"

        # Try different possible locations for makensis
        $makensis_paths = @(
            "C:\Program Files (x86)\NSIS\makensis.exe",
            "C:\ProgramData\chocolatey\lib\nsis\tools\makensis.exe",
            "makensis.exe"
        )

        $makensis_found = $false
        foreach ($path in $makensis_paths) {
            if (Test-Path $path -ErrorAction SilentlyContinue) {
                echo "Found makensis at: $path"
                & $path installer.nsi
                $makensis_found = $true
                break
            }
        }

        if (-not $makensis_found) {
            echo "ERROR: makensis.exe not found in any expected location"
            echo "Available files in C:\Program Files (x86)\NSIS:"
            if (Test-Path "C:\Program Files (x86)\NSIS") { Get-ChildItem "C:\Program Files (x86)\NSIS" }
            echo "Available files in C:\ProgramData\chocolatey\lib\nsis\tools:"
            if (Test-Path "C:\ProgramData\chocolatey\lib\nsis\tools") { Get-ChildItem "C:\ProgramData\chocolatey\lib\nsis\tools" }
            exit 1
        }

    - name: Create macOS DMG
      if: matrix.installer-type == 'dmg'
      run: |
        echo "Starting macOS DMG creation..."
        brew install create-dmg

        mkdir -p dmg-staging
        cp -R dist/Docx2Shelf.app dmg-staging/

        # Create uninstall script
        cat > dmg-staging/Uninstall-Docx2Shelf.command << 'EOF'
        #!/bin/bash
        # Docx2Shelf Uninstaller for macOS

        echo "=========================================="
        echo "       Docx2Shelf Uninstaller"
        echo "=========================================="
        echo ""

        # Check if running as admin (for system-wide removal)
        if [[ $EUID -eq 0 ]]; then
            echo "Running with administrator privileges..."
            APP_PATH="/Applications/Docx2Shelf.app"
        else
            echo "Running as user (will remove from user Applications)..."
            APP_PATH="$HOME/Applications/Docx2Shelf.app"
        fi

        # Remove application
        if [ -d "$APP_PATH" ]; then
            echo "Removing Docx2Shelf application..."
            rm -rf "$APP_PATH"
            echo "✓ Application removed from $APP_PATH"
        else
            echo "⚠ Application not found at $APP_PATH"
        fi

        # Remove user settings
        echo ""
        read -p "Do you want to remove user settings and preferences? (y/N): " remove_settings
        if [[ $remove_settings =~ ^[Yy]$ ]]; then
            rm -rf "$HOME/Library/Preferences/com.docx2shelf.app.plist" 2>/dev/null
            rm -rf "$HOME/Library/Application Support/Docx2Shelf" 2>/dev/null
            rm -rf "$HOME/Library/Caches/com.docx2shelf.app" 2>/dev/null
            echo "✓ User settings removed"
        fi

        echo ""
        echo "=========================================="
        echo "Docx2Shelf has been successfully uninstalled!"
        echo "=========================================="
        echo "Press any key to close this window..."
        read -n 1 -s

        EOF

        chmod +x dmg-staging/Uninstall-Docx2Shelf.command

        create-dmg \
          --volname "Docx2Shelf Installer" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "Docx2Shelf.app" 175 120 \
          --hide-extension "Docx2Shelf.app" \
          --app-drop-link 425 120 \
          "Docx2Shelf-Installer.dmg" \
          "dmg-staging/"

    - name: Create Linux AppImage
      if: matrix.installer-type == 'appimage'
      run: |
        echo "Starting Linux AppImage creation..."

        # Install FUSE for AppImage creation
        sudo apt-get update
        sudo apt-get install -y fuse libfuse2

        # Download AppImage tools
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage

        # Create AppDir structure
        mkdir -p Docx2Shelf.AppDir/usr/bin
        mkdir -p Docx2Shelf.AppDir/usr/share/applications
        mkdir -p Docx2Shelf.AppDir/usr/share/icons/hicolor/256x256/apps

        # Copy application files
        cp -r dist/Docx2Shelf/* Docx2Shelf.AppDir/usr/bin/

        # Create desktop file in AppDir root (required by AppImage)
        cat > Docx2Shelf.AppDir/docx2shelf.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Docx2Shelf
        Comment=Document to EPUB Converter
        Exec=Docx2Shelf
        Icon=docx2shelf
        Categories=Office;Publishing;
        EOF

        # Also copy to standard location for system integration
        cp Docx2Shelf.AppDir/docx2shelf.desktop Docx2Shelf.AppDir/usr/share/applications/

        # Copy icon to AppDir root and standard location
        cp src/docx2shelf/gui/assets/icon.png Docx2Shelf.AppDir/docx2shelf.png
        cp src/docx2shelf/gui/assets/icon.png Docx2Shelf.AppDir/usr/share/icons/hicolor/256x256/apps/docx2shelf.png

        # Create AppRun
        cat > Docx2Shelf.AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        exec "${HERE}/usr/bin/Docx2Shelf" "$@"
        EOF
        chmod +x Docx2Shelf.AppDir/AppRun

        # Build AppImage
        ./appimagetool-x86_64.AppImage Docx2Shelf.AppDir Docx2Shelf-x86_64.AppImage

        # Create separate uninstaller script for Linux
        cat > uninstall-docx2shelf.sh << 'EOF'
        #!/bin/bash
        # Docx2Shelf Uninstaller for Linux

        echo "=========================================="
        echo "       Docx2Shelf Uninstaller"
        echo "=========================================="
        echo ""

        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        APPIMAGE_PATH="$SCRIPT_DIR/Docx2Shelf-"*".AppImage"

        # Remove AppImage file
        if ls $APPIMAGE_PATH 1> /dev/null 2>&1; then
            echo "Found AppImage files:"
            ls -1 $APPIMAGE_PATH
            echo ""
            read -p "Remove AppImage executable(s)? (y/N): " remove_app
            if [[ $remove_app =~ ^[Yy]$ ]]; then
                rm -f $APPIMAGE_PATH
                echo "✓ AppImage executable(s) removed"
            fi
        else
            echo "⚠ No AppImage files found in current directory"
        fi

        # Remove desktop integration (if installed)
        DESKTOP_FILE="$HOME/.local/share/applications/Docx2Shelf.desktop"
        if [ -f "$DESKTOP_FILE" ]; then
            echo ""
            read -p "Remove desktop integration? (y/N): " remove_desktop
            if [[ $remove_desktop =~ ^[Yy]$ ]]; then
                rm -f "$DESKTOP_FILE"
                rm -f "$HOME/.local/share/icons/hicolor/*/apps/docx2shelf.*" 2>/dev/null
                echo "✓ Desktop integration removed"
            fi
        fi

        # Remove user settings
        echo ""
        read -p "Remove user settings and preferences? (y/N): " remove_settings
        if [[ $remove_settings =~ ^[Yy]$ ]]; then
            rm -rf "$HOME/.config/Docx2Shelf" 2>/dev/null
            rm -rf "$HOME/.local/share/Docx2Shelf" 2>/dev/null
            rm -rf "$HOME/.cache/Docx2Shelf" 2>/dev/null
            echo "✓ User settings removed"
        fi

        # Remove this uninstaller script
        echo ""
        read -p "Remove this uninstaller script? (y/N): " remove_script
        if [[ $remove_script =~ ^[Yy]$ ]]; then
            echo "✓ Removing uninstaller script..."
            rm -f "$0"
        fi

        echo ""
        echo "=========================================="
        echo "Docx2Shelf uninstallation completed!"
        echo "=========================================="

        EOF

        chmod +x uninstall-docx2shelf.sh

    - name: Upload installer artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installers-${{ matrix.installer-type }}
        path: |
          *.exe
          *.dmg
          *.AppImage
          *.sh
          *.command

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, create-installers]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Organize release files
      run: |
        # Create release directory structure
        mkdir -p release-assets

        # Copy installers
        find . -name "Docx2Shelf-Setup.exe" -exec cp {} release-assets/ \;
        find . -name "Docx2Shelf-Installer.dmg" -exec cp {} release-assets/ \;
        find . -name "Docx2Shelf-x86_64.AppImage" -exec cp {} release-assets/ \;

        # Copy uninstaller scripts
        find . -name "Uninstall-Docx2Shelf.command" -exec cp {} release-assets/ \;
        find . -name "uninstall-docx2shelf.sh" -exec cp {} release-assets/ \;

        # Copy portable versions
        find . -name "docx2shelf-*-portable.*" -exec cp {} release-assets/ \;

        # Rename files for clarity
        cd release-assets

        # Rename with version tag
        VERSION=${GITHUB_REF#refs/tags/v}

        if [ -f "Docx2Shelf-Setup.exe" ]; then
          mv "Docx2Shelf-Setup.exe" "Docx2Shelf-${VERSION}-Windows-Installer.exe"
        fi

        if [ -f "Docx2Shelf-Installer.dmg" ]; then
          mv "Docx2Shelf-Installer.dmg" "Docx2Shelf-${VERSION}-macOS-Installer.dmg"
        fi

        if [ -f "Docx2Shelf-x86_64.AppImage" ]; then
          mv "Docx2Shelf-x86_64.AppImage" "Docx2Shelf-${VERSION}-Linux-x86_64.AppImage"
        fi

        # Rename portable files
        for file in docx2shelf-*-portable.*; do
          if [ -f "$file" ]; then
            new_name=$(echo "$file" | sed "s/docx2shelf-/Docx2Shelf-${VERSION}-/")
            mv "$file" "$new_name"
          fi
        done

        # List all files
        ls -la

    - name: Generate checksums
      run: |
        cd release-assets

        # Generate SHA256 checksums
        sha256sum * > SHA256SUMS.txt

        # Generate MD5 checksums for compatibility
        md5sum * > MD5SUMS.txt

        echo "Generated checksums:"
        cat SHA256SUMS.txt

    - name: Create release notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}

        cat > RELEASE_NOTES.md << EOF
        # Docx2Shelf v${VERSION}

        ## 📥 Downloads

        ### Installers (Recommended)
        - **Windows**: [Docx2Shelf-${VERSION}-Windows-Installer.exe](./Docx2Shelf-${VERSION}-Windows-Installer.exe)
        - **macOS**: [Docx2Shelf-${VERSION}-macOS-Installer.dmg](./Docx2Shelf-${VERSION}-macOS-Installer.dmg)
        - **Linux**: [Docx2Shelf-${VERSION}-Linux-x86_64.AppImage](./Docx2Shelf-${VERSION}-Linux-x86_64.AppImage)

        ### Portable Versions
        - **Windows Portable**: [Docx2Shelf-${VERSION}-windows-portable.zip](./Docx2Shelf-${VERSION}-windows-portable.zip)
        - **macOS Portable**: [Docx2Shelf-${VERSION}-macos-portable.zip](./Docx2Shelf-${VERSION}-macos-portable.zip)
        - **Linux Portable**: [Docx2Shelf-${VERSION}-linux-portable.tar.gz](./Docx2Shelf-${VERSION}-linux-portable.tar.gz)

        ### Uninstallers
        - **macOS**: [Uninstall-Docx2Shelf.command](./Uninstall-Docx2Shelf.command) (for manual uninstallation)
        - **Linux**: [uninstall-docx2shelf.sh](./uninstall-docx2shelf.sh) (for AppImage users)
        - **Windows**: Built-in uninstaller (accessible via Control Panel or Start Menu)

        ### Verification
        - [SHA256 Checksums](./SHA256SUMS.txt)
        - [MD5 Checksums](./MD5SUMS.txt)

        ## 🚀 Quick Start

        ### Windows
        1. Download \`Docx2Shelf-${VERSION}-Windows-Installer.exe\`
        2. Run the installer
        3. Launch from Start Menu or Desktop shortcut

        ### macOS
        1. Download \`Docx2Shelf-${VERSION}-macOS-Installer.dmg\`
        2. Open the DMG and drag Docx2Shelf to Applications
        3. Launch from Applications folder

        ### Linux
        1. Download \`Docx2Shelf-${VERSION}-Linux-x86_64.AppImage\`
        2. Make executable: \`chmod +x Docx2Shelf-*.AppImage\`
        3. Run: \`./Docx2Shelf-*.AppImage\`

        ## 🗑️ Uninstallation

        ### Windows
        1. Go to **Settings** → **Apps** → **Installed Apps**
        2. Find **Docx2Shelf** and click **Uninstall**
        3. Or run \`uninstall.exe\` from the installation folder

        ### macOS
        1. Download and run [Uninstall-Docx2Shelf.command](./Uninstall-Docx2Shelf.command)
        2. Or manually drag Docx2Shelf from Applications to Trash

        ### Linux
        1. Download and run [uninstall-docx2shelf.sh](./uninstall-docx2shelf.sh)
        2. Or simply delete the AppImage file

        ## 🛠️ System Requirements

        - **Windows**: Windows 10/11 (64-bit)
        - **macOS**: macOS 10.15+ (Catalina or newer)
        - **Linux**: Modern distribution with glibc 2.28+ (Ubuntu 18.04+, CentOS 8+)

        ## 🤖 AI Features

        This release includes advanced AI chapter detection with support for:
        - **Local LLMs** (Ollama, LM Studio, etc.)
        - **Remote AI services** (OpenAI, Anthropic)
        - **Free AI quota** for testing
        - **Heuristic fallback** for offline use

        ## 🔐 Security Verification

        Verify download integrity using checksums:
        \`\`\`bash
        # Windows
        certutil -hashfile Docx2Shelf-${VERSION}-Windows-Installer.exe SHA256

        # macOS/Linux
        sha256sum Docx2Shelf-${VERSION}-*
        \`\`\`

        Compare against [SHA256SUMS.txt](./SHA256SUMS.txt)

        EOF


    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/*
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
        discussion_category_name: Releases
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to package registries
      run: |
        # Future: Upload to package managers
        echo "Future: Upload to chocolatey, homebrew, snap store, etc."