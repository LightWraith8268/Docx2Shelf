name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.12', '3.13']
        include:
          # Add coverage reporting for one specific combination
          - os: ubuntu-latest
            python-version: '3.11'
            coverage: true
          # Test minimum Python version with all features
          - os: ubuntu-latest
            python-version: '3.11'
            test-scope: 'full'
          # Test latest Python version with performance benchmarks
          - os: ubuntu-latest
            python-version: '3.13'
            test-scope: 'performance'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          # Install Chrome for smoke tests
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Run linting
        run: |
          ruff check src/ tests/

      - name: Run type checking
        run: |
          mypy src/docx2shelf/ --ignore-missing-imports || true

      - name: Run comprehensive tests
        run: |
          if [ "${{ matrix.test-scope }}" = "full" ]; then
            python scripts/run_tests.py --mode full --coverage
          elif [ "${{ matrix.test-scope }}" = "performance" ]; then
            python scripts/run_tests.py --mode ci --verbose
            # Run performance benchmarks
            python -c "
            import time
            from docx2shelf.convert import convert_file_to_html
            from pathlib import Path

            # Create test content
            test_content = '<h1>Chapter 1</h1>' + '<p>Test paragraph.</p>' * 1000
            test_file = Path('benchmark_test.html')
            test_file.write_text(test_content)

            # Benchmark conversion
            start = time.time()
            result = convert_file_to_html(test_file)
            duration = time.time() - start

            print(f'Performance: Converted {len(test_content)} chars in {duration:.2f}s')
            print(f'Throughput: {len(test_content)/duration:.0f} chars/sec')

            # Cleanup
            test_file.unlink()
            "
          else
            python scripts/run_tests.py --mode ci --coverage
          fi
        shell: bash
        env:
          HYPOTHESIS_PROFILE: ci

      - name: Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  test-tools:
    runs-on: ubuntu-latest
    name: Test with external tools
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Install Pandoc
        run: |
          python -c "from docx2shelf.tools import install_pandoc; install_pandoc()"

      - name: Install EPUBCheck
        run: |
          python -c "from docx2shelf.tools import install_epubcheck; install_epubcheck()"

      - name: Test tools integration
        run: |
          python -c "from docx2shelf.tools import pandoc_path, epubcheck_cmd; print(f'Pandoc: {pandoc_path()}'); print(f'EPUBCheck: {epubcheck_cmd()}')"

      - name: Run tools doctor
        run: |
          python -m docx2shelf tools doctor

      - name: Test conversion with tools
        run: |
          # Create a simple test and verify tools work
          echo "<h1>Test</h1><p>Content</p>" > test.html
          python -c "
          from docx2shelf.convert import convert_file_to_html
          from pathlib import Path
          result = convert_file_to_html(Path('test.html'))
          print(f'Conversion result: {len(result[0])} chunks')
          "

  test-plugins:
    runs-on: ubuntu-latest
    name: Test plugin system
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Test plugin discovery
        run: |
          python -m docx2shelf plugins discover

      - name: Test plugin creation
        run: |
          python -m docx2shelf plugins create test_plugin --template basic
          ls -la test_plugin.py

      - name: Test plugin loading
        run: |
          python -m docx2shelf plugins load test_plugin.py
          python -m docx2shelf plugins list

