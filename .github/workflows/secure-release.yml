name: Secure Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'v1.2.5'

permissions:
  contents: read
  id-token: write  # Required for Sigstore
  packages: write
  attestations: write

jobs:
  build-and-sign:
    name: Build and Sign Release Artifacts
    runs-on: ubuntu-latest
    outputs:
      artifact-hashes: ${{ steps.hash.outputs.hashes }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine

    - name: Install project dependencies
      run: |
        pip install -e .[dev,docx,pandoc]

    - name: Run security scan
      run: |
        pip install safety bandit
        safety check --json --output security-scan.json || true
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run tests
      run: |
        pip install pytest pytest-cov
        pytest --cov=src/docx2shelf --cov-report=json

    - name: Build distributions
      run: |
        python -m build
        ls -la dist/

    - name: Generate artifact hashes
      id: hash
      run: |
        cd dist
        echo "hashes=$(sha256sum * | base64 -w0)" >> "$GITHUB_OUTPUT"

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign artifacts with Sigstore
      run: |
        cd dist
        for file in *; do
          cosign sign-blob --output-signature "${file}.sig" --output-certificate "${file}.pem" "$file"
        done

    - name: Generate SLSA provenance
      uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
      with:
        base64-subjects: ${{ steps.hash.outputs.hashes }}
        upload-assets: true

    - name: Generate SBOM
      run: |
        pip install cyclonedx-bom
        cyclonedx-py --output-format json --output-file sbom.json
        mv sbom.json dist/

    - name: Create security summary
      run: |
        python -c "
import json
import datetime
import os

# Read security scan results
try:
    with open('security-scan.json') as f:
        safety_results = json.load(f)
except:
    safety_results = []

try:
    with open('bandit-report.json') as f:
        bandit_results = json.load(f)
except:
    bandit_results = {'results': []}

# Create security summary
summary = {
    'build_time': datetime.datetime.utcnow().isoformat(),
    'version': '${{ github.ref_name }}',
    'commit': '${{ github.sha }}',
    'security_scan': {
        'safety_vulnerabilities': len(safety_results),
        'bandit_issues': len(bandit_results.get('results', [])),
        'scan_clean': len(safety_results) == 0 and len(bandit_results.get('results', [])) == 0
    },
    'artifacts': {
        'sigstore_signed': True,
        'slsa_provenance': True,
        'sbom_generated': True
    }
}

with open('dist/security-summary.json', 'w') as f:
    json.dump(summary, f, indent=2)
"

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          dist/*
          security-scan.json
          bandit-report.json

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Security Attestations

          This release includes:
          - ✅ Sigstore signatures for all artifacts
          - ✅ SLSA Level 3 provenance
          - ✅ Software Bill of Materials (SBOM)
          - ✅ Security vulnerability scan

          ## Verification

          To verify signatures:
          ```bash
          cosign verify-blob --signature <artifact>.sig --certificate <artifact>.pem <artifact>
          ```

          ## Files

          - `*.whl` - Python wheel packages
          - `*.tar.gz` - Source distributions
          - `*.sig` - Sigstore signatures
          - `*.pem` - Sigstore certificates
          - `sbom.json` - Software Bill of Materials
          - `security-summary.json` - Security scan summary
        draft: false
        prerelease: false

  upload-to-pypi:
    name: Upload to PyPI
    needs: build-and-sign
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
      url: https://pypi.org/p/docx2shelf

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true  # Generate attestations for PyPI

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-sign

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python

  docker-build:
    name: Build and Sign Docker Images
    needs: build-and-sign
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign Docker images
      run: |
        images="${{ steps.meta.outputs.tags }}"
        for image in $images; do
          cosign sign --yes "$image@${{ steps.build.outputs.digest }}"
        done

    - name: Generate Docker SBOM
      run: |
        images="${{ steps.meta.outputs.tags }}"
        for image in $images; do
          cosign attest --yes --predicate sbom.spdx.json "$image@${{ steps.build.outputs.digest }}"
        done