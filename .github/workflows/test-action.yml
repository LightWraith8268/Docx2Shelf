name: Test Docx2Shelf Action

on:
  workflow_dispatch:
  push:
    paths:
      - 'action.yml'
      - '.github/workflows/test-action.yml'

jobs:
  test-action-matrix:
    name: Test on ${{ matrix.os }} (Python ${{ matrix.python-version }}, Pandoc: ${{ matrix.with-pandoc }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']
        with-pandoc: [true, false]
        exclude:
          # Reduce matrix size for efficiency
          - os: macos-latest
            python-version: '3.12'
          - os: windows-latest
            python-version: '3.12'
            with-pandoc: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create test DOCX file
        shell: bash
        run: |
          mkdir -p test-files
          cat > test-files/test.md << 'EOF'
          # Test Document

          This is a test document for the Docx2Shelf GitHub Action.

          ## Chapter 1: Introduction

          Welcome to this test document. This chapter introduces the concept.

          ## Chapter 2: Content

          This chapter contains the main content of the document.

          ### Subsection

          Here is a subsection with some additional details.

          ## Chapter 3: Conclusion

          This is the final chapter of our test document.
          EOF

      - name: Convert Markdown to DOCX (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if command -v pandoc >/dev/null 2>&1; then
            pandoc test-files/test.md -o test-files/test.docx
          else
            # Create a minimal DOCX-like structure for testing
            echo "Creating minimal test file..."
            echo "# Test Document" > test-files/test.txt
            echo "This is a test document." >> test-files/test.txt
            # For this test, we'll use the markdown file directly
            cp test-files/test.md test-files/test.docx
          fi

      - name: Convert Markdown to DOCX (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (Get-Command pandoc -ErrorAction SilentlyContinue) {
            pandoc test-files/test.md -o test-files/test.docx
          } else {
            # Create a minimal test file
            "# Test Document" | Out-File -FilePath test-files/test.txt -Encoding UTF8
            "This is a test document." | Add-Content -Path test-files/test.txt -Encoding UTF8
            # For this test, we'll use the markdown file directly
            Copy-Item test-files/test.md test-files/test.docx
          }

      - name: Test Docx2Shelf Action
        uses: ./
        with:
          input-file: test-files/test.docx
          title: 'Test Book from Action'
          author: 'GitHub Actions'
          output-dir: ./epub-output
          theme: serif
          with-pandoc: ${{ matrix.with-pandoc }}
          with-epubcheck: true
          generate-preview: true
          json-output: true

      - name: Verify outputs
        shell: bash
        run: |
          echo "Checking for generated files..."
          ls -la epub-output/ || true

          if [ -f "build.log" ]; then
            echo "=== Build Log ==="
            cat build.log
          fi

          if [ -f "validation.log" ]; then
            echo "=== Validation Log ==="
            cat validation.log
          fi

          # Check if EPUB was created
          if ls epub-output/*.epub 1> /dev/null 2>&1; then
            echo "✅ EPUB file created successfully"
            ls -la epub-output/*.epub
          else
            echo "❌ No EPUB file found"
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}-pandoc${{ matrix.with-pandoc }}
          path: |
            epub-output/
            build.log
            validation.log
          if-no-files-found: warn