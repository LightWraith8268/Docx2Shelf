name: Test Installers

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'install*.bat'
      - 'scripts/install*'
      - 'scripts/create_offline_installer.py'
      - 'scripts/validate_installation.py'
      - '.github/workflows/test-installers.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'install*.bat'
      - 'scripts/install*'
      - 'scripts/create_offline_installer.py'
      - 'scripts/validate_installation.py'
      - '.github/workflows/test-installers.yml'
  schedule:
    # Run weekly to catch dependency issues
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      test_offline:
        description: 'Test offline installer'
        required: false
        default: 'true'
        type: boolean
      test_enhanced:
        description: 'Test enhanced installer'
        required: false
        default: 'true'
        type: boolean

jobs:
  test-windows-installer:
    name: Test Windows Installer
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        installer-type: ['standard', 'enhanced']
        exclude:
          # Skip enhanced installer for 3.12 to reduce CI time
          - python-version: '3.12'
            installer-type: 'enhanced'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Prepare clean environment
      shell: cmd
      run: |
        echo "Cleaning up any existing installations..."
        pip uninstall -y docx2shelf || echo "docx2shelf not installed"
        pipx uninstall docx2shelf || echo "docx2shelf not in pipx"

    - name: Build package for testing
      shell: cmd
      run: |
        echo "Building package for local testing..."
        python -m pip install --upgrade pip setuptools wheel build
        python -m build
        echo "Package built successfully"

    - name: Test Standard Installer
      if: matrix.installer-type == 'standard'
      shell: cmd
      run: |
        echo "Testing standard installer..."
        # First test without local package (should use PyPI or GitHub)
        .\install.bat

        # Verify installation
        docx2shelf --version
        if %errorlevel% neq 0 (
          echo "Standard installer test failed"
          exit /b 1
        )
        echo "Standard installer test passed"

    - name: Test Enhanced Installer
      if: matrix.installer-type == 'enhanced'
      shell: cmd
      run: |
        echo "Testing enhanced installer..."

        # Test development mode installation
        .\install_enhanced.bat --dev
        if %errorlevel% neq 0 (
          echo "Enhanced installer (dev mode) test failed"
          exit /b 1
        )

        # Verify installation
        docx2shelf --version
        if %errorlevel% neq 0 (
          echo "Enhanced installer verification failed"
          exit /b 1
        )
        echo "Enhanced installer test passed"

    - name: Run Installation Validator
      shell: cmd
      run: |
        echo "Running installation validator..."
        python scripts\validate_installation.py --verbose
        if %errorlevel% neq 0 (
          echo "Installation validation failed"
          exit /b 1
        )
        echo "Installation validation passed"

    - name: Test Basic Functionality
      shell: cmd
      run: |
        echo "Testing basic functionality..."
        docx2shelf --help
        if %errorlevel% neq 0 (
          echo "Basic functionality test failed"
          exit /b 1
        )
        echo "Basic functionality test passed"

    - name: Test Wizard Command
      shell: cmd
      run: |
        echo "Testing wizard command availability..."
        echo | docx2shelf wizard --help
        if %errorlevel% neq 0 (
          echo "Wizard command test failed"
          exit /b 1
        )
        echo "Wizard command test passed"

    - name: Test Theme Editor Command
      shell: cmd
      run: |
        echo "Testing theme editor command availability..."
        echo | docx2shelf theme-editor --help
        if %errorlevel% neq 0 (
          echo "Theme editor command test failed"
          exit /b 1
        )
        echo "Theme editor command test passed"

    - name: Upload installer logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: installer-logs-${{ matrix.python-version }}-${{ matrix.installer-type }}
        path: |
          *.log
          %USERPROFILE%\.docx2shelf\*.log
          %TEMP%\docx2shelf_*.log

  test-offline-installer:
    name: Test Offline Installer
    runs-on: windows-latest
    if: github.event.inputs.test_offline != 'false'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Build package
      shell: cmd
      run: |
        python -m pip install --upgrade pip setuptools wheel build
        python -m build

    - name: Create offline installer
      shell: cmd
      run: |
        echo "Creating offline installer..."
        python scripts\create_offline_installer.py --output offline_test
        if %errorlevel% neq 0 (
          echo "Failed to create offline installer"
          exit /b 1
        )
        echo "Offline installer created successfully"

    - name: Test offline installer extraction
      shell: cmd
      run: |
        echo "Testing offline installer extraction..."
        cd offline_test
        tar -xf docx2shelf_offline_installer.zip
        if %errorlevel% neq 0 (
          echo "Failed to extract offline installer"
          exit /b 1
        )
        echo "Offline installer extracted successfully"

    - name: Clean environment for offline test
      shell: cmd
      run: |
        echo "Cleaning environment..."
        pip uninstall -y docx2shelf ebooklib python-docx || echo "Packages not installed"

    - name: Test offline installation (Windows)
      shell: cmd
      run: |
        echo "Testing offline installation..."
        cd offline_test\docx2shelf_offline_installer\scripts
        .\install_offline.bat
        if %errorlevel% neq 0 (
          echo "Offline installation failed"
          exit /b 1
        )
        echo "Offline installation completed"

    - name: Verify offline installation
      shell: cmd
      run: |
        echo "Verifying offline installation..."
        docx2shelf --version
        if %errorlevel% neq 0 (
          echo "Offline installation verification failed"
          exit /b 1
        )
        echo "Offline installation verification passed"

    - name: Upload offline installer
      uses: actions/upload-artifact@v4
      with:
        name: offline-installer
        path: offline_test/docx2shelf_offline_installer.zip

  test-unix-compatibility:
    name: Test Unix Compatibility
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'

    - name: Test validation script on Unix
      run: |
        echo "Testing validation script on Unix..."
        python scripts/validate_installation.py --help
        if [ $? -ne 0 ]; then
          echo "Validation script test failed on Unix"
          exit 1
        fi
        echo "Validation script test passed on Unix"

    - name: Test offline installer builder on Unix
      run: |
        echo "Testing offline installer builder on Unix..."
        python scripts/create_offline_installer.py --help
        if [ $? -ne 0 ]; then
          echo "Offline installer builder test failed on Unix"
          exit 1
        fi
        echo "Offline installer builder test passed on Unix"

    - name: Build package and create offline installer
      run: |
        echo "Building package and creating offline installer on Unix..."
        python -m pip install --upgrade pip setuptools wheel build
        python -m build
        python scripts/create_offline_installer.py --output offline_unix_test
        if [ $? -ne 0 ]; then
          echo "Failed to create offline installer on Unix"
          exit 1
        fi
        echo "Unix offline installer created successfully"

    - name: Test Unix offline installer script
      run: |
        echo "Testing Unix offline installer script..."
        cd offline_unix_test
        unzip -q docx2shelf_offline_installer.zip
        cd docx2shelf_offline_installer/scripts
        chmod +x install_offline.sh
        # Test script syntax without actually installing
        bash -n install_offline.sh
        if [ $? -ne 0 ]; then
          echo "Unix installer script has syntax errors"
          exit 1
        fi
        echo "Unix installer script syntax check passed"

  test-diagnostics:
    name: Test Diagnostic Tools
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Test diagnostic script
      shell: cmd
      run: |
        echo "Testing diagnostic script..."
        .\scripts\diagnose.bat
        if %errorlevel% neq 0 (
          echo "Diagnostic script test failed"
          exit /b 1
        )
        echo "Diagnostic script test passed"

    - name: Upload diagnostic logs
      uses: actions/upload-artifact@v4
      with:
        name: diagnostic-logs
        path: |
          docx2shelf_diagnostic_*.log

  integration-test:
    name: End-to-End Integration Test
    runs-on: windows-latest
    needs: [test-windows-installer, test-offline-installer]
    if: always() && (needs.test-windows-installer.result == 'success' || needs.test-offline-installer.result == 'success')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install using enhanced installer
      shell: cmd
      run: |
        echo "Installing docx2shelf using enhanced installer..."
        .\install_enhanced.bat --dev

    - name: Run comprehensive validation
      shell: cmd
      run: |
        echo "Running comprehensive validation..."
        python scripts\validate_installation.py --verbose
        if %errorlevel% neq 0 (
          echo "Comprehensive validation failed"
          exit /b 1
        )

    - name: Test all major commands
      shell: cmd
      run: |
        echo "Testing all major commands..."
        docx2shelf --help
        docx2shelf --version
        echo | docx2shelf wizard --help
        echo | docx2shelf theme-editor --help
        echo "All command tests passed"

    - name: Generate integration report
      shell: cmd
      run: |
        echo "Generating integration test report..."
        echo "Integration Test Report" > integration_report.txt
        echo "=======================" >> integration_report.txt
        echo. >> integration_report.txt
        echo "Python Version:" >> integration_report.txt
        python --version >> integration_report.txt
        echo. >> integration_report.txt
        echo "Docx2Shelf Version:" >> integration_report.txt
        docx2shelf --version >> integration_report.txt
        echo. >> integration_report.txt
        echo "Installation Validation:" >> integration_report.txt
        python scripts\validate_installation.py --quiet >> integration_report.txt

    - name: Upload integration report
      uses: actions/upload-artifact@v4
      with:
        name: integration-report
        path: integration_report.txt

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-windows-installer, test-offline-installer, test-unix-compatibility, test-diagnostics, integration-test]
    if: always()

    steps:
    - name: Check overall status
      run: |
        echo "Installer test results:"
        echo "Windows Installer: ${{ needs.test-windows-installer.result }}"
        echo "Offline Installer: ${{ needs.test-offline-installer.result }}"
        echo "Unix Compatibility: ${{ needs.test-unix-compatibility.result }}"
        echo "Diagnostics: ${{ needs.test-diagnostics.result }}"
        echo "Integration Test: ${{ needs.integration-test.result }}"

        # Determine if any critical tests failed
        if [[ "${{ needs.test-windows-installer.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-test.result }}" == "failure" ]]; then
          echo "❌ Critical installer tests failed"
          exit 1
        else
          echo "✅ Installer tests completed successfully"
        fi