name: 'Docx2Shelf EPUB Builder'
description: 'Convert DOCX documents to EPUB format using Docx2Shelf'
author: 'Docx2Shelf Team'

branding:
  icon: 'book-open'
  color: 'blue'

inputs:
  input-file:
    description: 'Path to the input DOCX file'
    required: true

  title:
    description: 'Book title'
    required: false

  author:
    description: 'Book author'
    required: false

  cover:
    description: 'Path to cover image file'
    required: false

  output-dir:
    description: 'Output directory for generated EPUB'
    required: false
    default: './output'

  metadata-file:
    description: 'Path to metadata.txt file'
    required: false

  theme:
    description: 'CSS theme to use (serif, sans, printlike)'
    required: false
    default: 'serif'

  with-pandoc:
    description: 'Install and use Pandoc for conversion'
    required: false
    default: 'true'

  with-epubcheck:
    description: 'Install and run EPUBCheck validation'
    required: false
    default: 'true'

  generate-preview:
    description: 'Generate preview files'
    required: false
    default: 'false'

  json-output:
    description: 'Generate machine-readable JSON output'
    required: false
    default: 'false'

  extra-args:
    description: 'Additional command-line arguments'
    required: false

outputs:
  epub-path:
    description: 'Path to the generated EPUB file'

  preview-path:
    description: 'Path to the preview directory (if generated)'

  validation-report:
    description: 'EPUBCheck validation report (if run)'

  build-log:
    description: 'Build process log'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Docx2Shelf
      shell: bash
      run: |
        pip install docx2shelf

    - name: Install Pandoc
      if: inputs.with-pandoc == 'true'
      shell: bash
      run: |
        docx2shelf tools install pandoc

    - name: Install EPUBCheck
      if: inputs.with-epubcheck == 'true'
      shell: bash
      run: |
        docx2shelf tools install epubcheck

    - name: Prepare build command
      shell: bash
      run: |
        BUILD_CMD="docx2shelf build --input \"${{ inputs.input-file }}\""

        if [ -n "${{ inputs.title }}" ]; then
          BUILD_CMD="$BUILD_CMD --title \"${{ inputs.title }}\""
        fi

        if [ -n "${{ inputs.author }}" ]; then
          BUILD_CMD="$BUILD_CMD --author \"${{ inputs.author }}\""
        fi

        if [ -n "${{ inputs.cover }}" ]; then
          BUILD_CMD="$BUILD_CMD --cover \"${{ inputs.cover }}\""
        fi

        if [ -n "${{ inputs.metadata-file }}" ]; then
          BUILD_CMD="$BUILD_CMD --metadata \"${{ inputs.metadata-file }}\""
        fi

        BUILD_CMD="$BUILD_CMD --output \"${{ inputs.output-dir }}\""
        BUILD_CMD="$BUILD_CMD --theme ${{ inputs.theme }}"

        if [ "${{ inputs.generate-preview }}" = "true" ]; then
          BUILD_CMD="$BUILD_CMD --preview"
        fi

        if [ "${{ inputs.json-output }}" = "true" ]; then
          BUILD_CMD="$BUILD_CMD --json"
        fi

        if [ -n "${{ inputs.extra-args }}" ]; then
          BUILD_CMD="$BUILD_CMD ${{ inputs.extra-args }}"
        fi

        echo "BUILD_COMMAND=$BUILD_CMD" >> $GITHUB_ENV

    - name: Build EPUB
      shell: bash
      run: |
        echo "Building EPUB with command: $BUILD_COMMAND"
        eval $BUILD_COMMAND > build.log 2>&1
        cat build.log

    - name: Set outputs
      shell: bash
      run: |
        # Find the generated EPUB file
        EPUB_FILE=$(find "${{ inputs.output-dir }}" -name "*.epub" -type f | head -1)
        echo "epub-path=$EPUB_FILE" >> $GITHUB_OUTPUT

        # Set preview path if generated
        if [ "${{ inputs.generate-preview }}" = "true" ]; then
          PREVIEW_DIR=$(find "${{ inputs.output-dir }}" -name "*.src" -type d | head -1)
          echo "preview-path=$PREVIEW_DIR" >> $GITHUB_OUTPUT
        fi

        # Set build log
        echo "build-log=$(pwd)/build.log" >> $GITHUB_OUTPUT

        # Run EPUBCheck if requested and set validation report
        if [ "${{ inputs.with-epubcheck }}" = "true" ] && [ -n "$EPUB_FILE" ]; then
          docx2shelf tools where > tools.txt
          EPUBCHECK_PATH=$(grep "EPUBCheck:" tools.txt | cut -d':' -f2 | xargs)
          if [ -n "$EPUBCHECK_PATH" ] && [ -f "$EPUBCHECK_PATH" ]; then
            java -jar "$EPUBCHECK_PATH" "$EPUB_FILE" > validation.log 2>&1 || true
            echo "validation-report=$(pwd)/validation.log" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Upload EPUB artifact
      uses: actions/upload-artifact@v4
      with:
        name: epub-output
        path: ${{ inputs.output-dir }}/*.epub
        if-no-files-found: warn

    - name: Upload preview artifact
      if: inputs.generate-preview == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: epub-preview
        path: ${{ inputs.output-dir }}/*.src/
        if-no-files-found: warn

    - name: Upload validation report
      if: inputs.with-epubcheck == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: validation.log
        if-no-files-found: warn