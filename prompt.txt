Title: Build “Docx2Shelf” — a DOCX→EPUB script

Goal: Create an offline Python 3.11 CLI app that ingests a .docx manuscript, a cover image, and metadata (author, series, book title, description, ISBN, language), then outputs a valid EPUB 3 with correct OPF, NAV, NCX, spine/manifest, CSS, and optional features. No cloud calls.

Key requirements

Inputs

Required: --docx, --title, --author (default “Riley E. Antrobus”), --cover

Optional: --seriesName, --seriesIndex, --description, --isbn, --language (default en), --publisher, --pubdate (ISO), --uuid (auto if absent), --subjects (comma-sep), --keywords (comma-sep)

Options:
--split-at (h1|h2|pagebreak, default h1),
--theme (serif|sans|printlike),
--embed-fonts DIR (ttf/otf),
--hyphenate on|off,
--justify on|off,
--toc-depth N (default 2),
--page-list on|off (EPUB page-list nav; reader support varies),
--css EXTRA.css (merge user CSS),
--page-numbers on|off (adds CSS counters on headings; informational),
--epub-version 3,
--cover-scale contain|cover (default contain)

Conversion pipeline

Prefer Pandoc via pypandoc for DOCX→HTML; gracefully fallback to python-docx extraction if Pandoc not installed. Provide clear install notes (Pandoc optional but recommended).

Assemble EPUB with ebooklib (or equivalent): build OPF, NAV (HTML), NCX, spine, manifest, metadata, and resources.

Auto-split content into XHTML files at --split-at.

Preserve bold/italics, headings, lists, images, captions, footnotes→endnotes, hyperlinks, and blockquotes.

Import embedded DOCX images into /images.

Metadata & series

Populate dc:title, dc:creator (role aut), dc:language, dc:identifier (ISBN if supplied; else UUID), dc:publisher, dc:date, subjects/keywords.

Add series metadata (Calibre-compatible): calibre:series and calibre:series_index.

Cover & front/back matter

Embed cover as official cover image + cover.xhtml.

Auto-generate Title Page, Copyright (template with year and author), optional Dedication/Acknowledgements if plain-text files provided via --dedication and --ack.

TOC

Generate semantic NAV (nav.xhtml) and NCX with depth --toc-depth. Headings supply entries.

Styling

Provide base CSS themes (serif, sans, printlike) with sensible typography, margins, hyphenation toggle, paragraph indent vs. space-between logic, drop-cap utility class (off by default).

If --page-numbers on, add non-intrusive CSS counters on h1/h2 and—if --page-list on—also generate an EPUB page-list (reader support varies).

Merge user CSS last.

Validation & output

Ensure EPUB passes epubcheck when available (invoke if found on PATH; otherwise skip with warning).

Output file pattern: SeriesName-##-BookTitle.epub if series given, else BookTitle.epub. Sanitize filenames.

CLI UX

Command:
docx2shelf build --docx manuscript.docx --cover cover.jpg --title "Book Title" --author "Riley E. Antrobus" --isbn 9781234567890 --seriesName "The Starborn Legacy" --seriesIndex 1 --description "..." --theme serif --justify on --hyphenate on

--dry-run prints planned manifest/spine.

--inspect emits a temp folder with unpacked EPUB sources for debugging.

Helpful errors (missing files, invalid ISBN, empty DOCX, wrong cover format).

Packaging

Deliver a pip-installable package (pyproject.toml) with a console_scripts entry docx2shelf and a PyInstaller spec for single-file executables (Win/Mac/Linux).

Include README.md (quickstart, options, Pandoc/epubcheck notes, troubleshooting).

Add pytest unit tests for metadata mapping, TOC depth, split logic, and the non-Pandoc fallback.

License: MIT.

Quality

Deterministic builds, UTF-8 safe, no telemetry. Works fully offline.

Modules: cli.py, convert.py, assemble.py, metadata.py, css/, templates/, utils.py, packaging/.

Docstrings + type hints.

Important notes to implement

EPUBs don’t have universal “page numbers.” Offer page-list nav and optional CSS counters, but warn that many readers ignore them.

Include both NAV (EPUB 3) and NCX (legacy) for broad compatibility.

Respect image max width and preserve aspect ratio; scale cover per --cover-scale.

Footnotes/endnotes remain anchored and clickable.

Deliverables

Full source tree, tests, README.md, examples/ (sample DOCX + outputs), and build scripts for pip + PyInstaller.

A usage cheat sheet in the README.